@{
    ViewData["Title"] = "Взаимодействие";
}

<div class="text-center"><h1 class="display-4">Схема взаимодействия</h1></div>
<p>
    В отличие от offline-программ веб-приложения ориентируются на двух распределенных
    участников взаимодействия:<br />
    Клиент - браузер (или другая программа), взаимодействующая с пользователем и
    формирует запрос на ресурсы сайта<br />
    Сервер – бэкенд, программа или совокупность программ, обрабатывающих запрос
</p>
<ul>
    <li>Пользователь вводит URL в браузере или нажимает на определенную ссылку.</li>
    <li>
        Браузер определяет сетевой адрес сервера (IP) из введенного URL,
        формирует и посылает НТТР-запрос, включая все необходимые данные в него
        (URL, Cookie, User-Agent, ...)
    </li>
    <li>
        Серверная часть, в большинстве случаев, в т.ч. ASP, состоит из двух
        "блоков" – веб-сервер и веб-приложение (application).
        Веб-сервер слушает порт и принимает "сырый" НТТР-запрос, разделяет его
        части: заголовки, тело, параметры, добавленные файлы и т.п.;
        формирует из них понятные для веб-приложения данные (.NET объекты) и передает
        управление веб-приложения. Один веб-сервер может обслуживать несколько
        сайтов (веб-приложений), в таком случае к задачам сервера относится
        определение того, какому из приложений передать управление.
        Для работы с .NET обычно берется IIS (Microsoft Internet Information
        Server) или производные от него
    </li>
    <li>
        Веб-приложение - это скомпилированный код (DLL), который согласуется с
        веб-сервером и продолжает обработку запроса, "разобранного" сервером.
        Процесс создания DLL и перемещение ее в область видимости веб-сервера
        называется Deploy. Процесс перемещения свидетельствует о том, что изменения в
        коды проекта не всегда сразу отображаются в браузере, даже при
        обновленные страницы. Они должны войти в DLL и переместить (с заменой)
        к веб-серверу (Redeploy)
    </li>
    <li>
        Внутри веб-приложения происходят процессы с разным жизненным циклом (Scope).
        Некоторые объекты создаются со стартом приложения и существуют в течение
        всего времени его работы. Это контекст данных, службы (хеширование,
        случайных чисел, шифрование). Такие объекты называют Singleton.
        Объекты контроллеров создаются новые для каждого НТТР-запроса. Это
        связано с требованиями безопасности - если объект был построен для авторизованного
        пользователя, то второй запрос от неавторизованного потенциально будет иметь
        доступ к объектам, построенным для авторизованного пользователя.
        Такая временная область называется RequestScope.
        Третья группа объектов каждый раз (при каждом обращении) должна образовывать
        новые экземпляры, например, DateTime, StringBuilder и т.д. Такие объекты
        называют Transient
    </li>
    <li>
        Конец работы контроллеру передает управление представлению. Это HTML из
        особым синтаксисом Razor, позволяющим инжектировать C# код, в частности
        передавать данные от контроллера Для этого предусмотрены два контейнера
        ViewBag (dynamic) и ViewData (Dictionary)<br />
        ViewBag: <b> @ViewBag.bagdata </b> <br />
        ViewData: <b> @ViewData["viewdata"] </b>
    </li>
    <li>
        Сформированный HTML передается в веб-сервер (IIS), который его "упаковывает"
        в НТТР-ответ (response) и отправляет клиенту.
    </li>
</ul>
<img src="/img/url.webp" />