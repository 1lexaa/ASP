@{
    ViewData["Title"] = "URL";
}

<div class="text-center"><h1 class="display-4">Cведения о структуре URL</h1></div>
<h3>Протокол</h3>
<p>
    Протоколы используются в ASP.NET для обмена данными между клиентом и сервером. Один из основных протоколов, используемых в ASP.NET, - это протокол HTTP
    (Hypertext Transfer Protocol). HTTP протокол используется для передачи данных между веб-сервером и веб-клиентом (браузером) с использованием стандартных
    методов запроса (GET, POST, PUT, DELETE и т.д.) и ответа (коды состояния, заголовки и тело сообщения).
    ASP.NET также поддерживает другие протоколы, такие как HTTPS (HTTP Secure) - защищенная версия протокола HTTP, FTP (File Transfer Protocol) - протокол для передачи
    файлов между сервером и клиентом, SMTP (Simple Mail Transfer Protocol) - протокол для отправки электронной почты и т.д.
    Протокол играет важную роль в структуре URL. URL - это адрес ресурса в сети, и он включает в себя протокол, который определяет каким образом клиент должен подключаться
    к серверу для получения ресурса.
    Например, если в URL указан протокол HTTP (Hypertext Transfer Protocol), то клиент должен использовать порт 80 для установления соединения с сервером
    и передачи запроса. Если же в URL указан протокол HTTPS (HTTP Secure), то клиент должен использовать порт 443 и защищенное SSL/TLS-соединение для
    установления связи с сервером.
    Таким образом, протокол определяет каким образом будут передаваться запросы и ответы между клиентом и сервером, а
    также каким образом будет обеспечиваться безопасность соединения и защита данных при их передаче.
</p>
<br />
<br />
<h3>Домен (origin)</h3>
<p>
    В структуре URL ASP.net домен, или origin, представляет собой часть URL-адреса, которая указывает на местоположение веб-ресурса в Интернете.
    Обычно домен указывает на имя сервера, на котором расположен ресурс, и может включать субдомены и доменные зоны. Например,
    в URL-адресе "https://www.example.com/about", "www.example.com" - это домен.
    Кроме того, домен также является частью так называемого "Same-Origin Policy" - политики безопасности, которая устанавливает правила взаимодействия между
    веб-страницами. В соответствии с этой политикой, веб-страницы могут безопасно обмениваться данными только в том случае, если они находятся в одном и том же домене.
    Если же веб-страницы находятся в разных доменах, то для безопасного взаимодействия необходимо использовать специальные методы, такие как CORS
    (Cross-Origin Resource Sharing) или JSONP (JSON with Padding).
</p>
<br />
<br />
<h3>Порт</h3>
<p>
    В структуре URL в ASP.NET порт - это необязательный числовой идентификатор, указывающий на порт сервера, на котором работает веб-приложение. Обычно в URL
    порт указывается после домена или IP-адреса, разделяется двоеточием, например: http://example.com:8080.
    Когда клиент отправляет запрос на сервер, он по умолчанию использует стандартные порты: для HTTP - 80, для HTTPS - 443. Однако, если на сервере используется
    другой порт, то необходимо указать его явно в URL.
    В ASP.NET порт может быть указан явно при создании URL-адресов или извлечен из текущего контекста запроса. Например, при использовании метода
    Url.Action в ASP.NET MVC можно указать порт в качестве части параметра routeValues.
    В целом, порт в структуре URL позволяет серверу определить, на каком порту нужно обрабатывать запросы, а клиенту - указать нужный порт для подключения к серверу.
</p>
<br />
<br />
<h3>PATH</h3>
<p>
    PATH - это часть URL, которая указывает на конкретный ресурс на сервере, к которому осуществляется запрос. Эта часть URL начинается после домена и порта
    (если он указан) и может содержать иерархическую структуру подкаталогов и файлов.
    Например, в URL http://www.example.com/products/software/antivirus.aspx, products/software/antivirus.aspx является частью пути (PATH).
    В данном случае, это означает, что клиент запрашивает ресурс "antivirus.aspx" в подкаталоге "software", который находится в подкаталоге "products" на сервере
    "www.example.com".
</p>
<br />
<br />
<h3>Хеш</h3>
<p>
    Хеш - это фрагмент строки, который используется для идентификации данных, которые были подвергнуты хэшированию. Хеширование - это процесс преобразования данных
    произвольной длины в набор бит фиксированной длины. Хеш-функции обычно используются для проверки целостности данных, а также для безопасного хранения паролей и
    другой конфиденциальной информации.
    В структуре URL, хеш обозначается символом # и указывает на фрагмент страницы. Фрагменты страницы не отправляются на сервер при выполнении запроса, и
    используются в основном на стороне клиента для изменения местоположения скролла на странице или для перехода к определенному разделу страницы. Например, если в
    URL есть хеш #section1, это может указывать на то, что нужно прокрутить страницу до раздела с id="section1".
</p>
<br />
<br />
<h3>URL-параметры</h3>
<p>
    URL-параметры (query parameters) - это способ передачи дополнительной информации в URL-адресе после знака вопроса «?».
    Они состоят из пар «ключ-значение», разделенных символом «&».
    Например, в URL-адресе «https://www.example.com/search?q=ASP.NET&lang=en», параметры запроса - «q=ASP.NET» и «lang=en». В этом примере «q» и
    «lang» - это ключи параметров, а «ASP.NET» и «en» - соответствующие значения.
    URL-параметры могут использоваться для передачи информации на сервер, например, при поиске веб-страницы или фильтрации содержимого. В ASP.NET Core параметры
    могут быть получены и обработаны в контроллере с помощью объекта Request.Query.
</p>