@{
    ViewData["Title"] = "Middleware";
}

<div class="text-center">
    <h1 class="display-4">Middleware - ПО промежуточного уровня</h1>
</div>
<p>
    Сессии позволяют хранить данные между разными запросами и, как следствие, удерживать
    аутентификацию пользователя. Но процесс проверки состояния сессии (наличие
    сохраненных данных) должно происходить в каждом методе каждого контроллера.
    Возникает потребность какого-то универсального объекта, выполняющего активность
    для всех запросов – всех контроллеров.
</p>
<p>
    Концепция Middleware – образование "слоистой" архитектуры программы, при которой
    поступающий запрос проходит все Middleware слой за слоем. Более того,
    Ответ (response) проходит те же слои, но в обратном порядке.
</p>
<p>
    С точки зрения программирования, Middleware это встраиваемые классы (объекты).
    в "цепь" последовательного вызова в "промежуточном уровне", предшествующего запуску
    контроллеров. Цепь одномерная, последовательная, следовательно порядок Middleware имеет
    значение.
</p>
<p>
    Создание Middleware
</p>
<ul>
    <li>Создаем папку Middleware в проекте (однократно)</li>
    <li>
        Создаем класс, в нем необходимо объявить ссылку на следующую Middleware
        и создать метод InvokeAsync/Invoke
    </li>
    <li>
        Метод InvokeAsync/Invoke должен вызвать следующее звено, иначе
        обработка запроса прекратится
    </li>
    <li>
        Поскольку конструктор Middleware зарезервирован системой, инжекция
        зависимостей осуществляется через метод InvokeAsync/Invoke
    </li>
    <li>Включение Middleware традиционно производится в Program.cs методами UseXxxx()</li>
    <li></li>
</ul>